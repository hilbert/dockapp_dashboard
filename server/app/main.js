// Compiled by Babel
// ** DO NOT EDIT THIS FILE DIRECTLY **
//
'use strict';

require('babel-polyfill');

var _stationManager = require('./lib/station-manager');

var _stationManager2 = _interopRequireDefault(_stationManager);

var _hilbertCliConnector = require('./lib/hilbert-cli-connector');

var _hilbertCliConnector2 = _interopRequireDefault(_hilbertCliConnector);

var _mkLivestatusConnector = require('./lib/mk-livestatus-connector');

var _mkLivestatusConnector2 = _interopRequireDefault(_mkLivestatusConnector);

var _httpApiServer = require('./lib/http-api-server');

var _httpApiServer2 = _interopRequireDefault(_httpApiServer);

var _testBackend = require('./lib/test-backend');

var _testBackend2 = _interopRequireDefault(_testBackend);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var appPackage = require('../package.json');
var logger = require('winston');
var nconf = require('nconf');

var testData = require('../data/test_mode/test_stations.json');

nconf.env().argv();
nconf.file('config.json');
nconf.defaults({
  port: '3000',
  hilbert_cli_path: '../work/dockapp',
  test: false,
  scriptConcurrency: 20,
  max_log_length: 100,
  log_directory: './log',
  log_level: 'info', // error, warn, info, verbose, debug, silly
  mkls_poll_delay: 1000,
  mkls_cmd: 'nc localhost 6557',
  long_poll_timeout: 15
});

logger.add(logger.transports.File, {
  filename: nconf.get('log_directory') + '/hilbert-ui.log',
  level: nconf.get('log_level'),
  handleExceptions: true,
  json: false
});

logger.level = nconf.get('log_level');

process.on('uncaughtException', function (err) {
  logger.error('Uncaught exception: ' + err.message + '. Exiting process.');
  process.exitCode = 1;
});

logger.info('Starting hilbert-ui server (v' + appPackage.version + ')');

var hilbertCLIConnector = null;
var mkLivestatusConnector = null;

if (nconf.get('test')) {
  logger.info('Running in Test Mode');
  var testBackend = new _testBackend2.default(nconf, logger);
  testBackend.simulateDelays = true;
  testBackend.load(testData);
  hilbertCLIConnector = testBackend.getHilbertCLIConnector();
  mkLivestatusConnector = testBackend.getMKLivestatusConnector();
} else {
  hilbertCLIConnector = new _hilbertCliConnector2.default(nconf, logger);
  mkLivestatusConnector = new _mkLivestatusConnector2.default(nconf, logger);
}

var stationManager = new _stationManager2.default(nconf, logger, hilbertCLIConnector, mkLivestatusConnector);

stationManager.init().then(function () {
  var server = new _httpApiServer2.default(stationManager, nconf, logger);
  server.listen(nconf.get('port'));
}).catch(function (err) {
  logger.error('Error initializing Station Manager: ' + err.message + '. Exiting process.');
  process.exit(1);
});
//# sourceMappingURL=main.js.map
