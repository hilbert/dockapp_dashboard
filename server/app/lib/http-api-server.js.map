{"version":3,"sources":["lib/http-api-server.js"],"names":["EventEmitter","require","iconmap","express","bodyParser","HttpAPIServer","stationManager","nconf","logger","server","use","json","events","setupRoutes","stationsLongPoll","get","on","signalUpdate","emit","router","Router","getStations","bind","post","postStationsStart","postStationsStop","postStationsChangeApp","getStationOutput","getServerOutput","getServerMKLivestatus","getNotifications","req","res","handleRequest","then","updateID","stations","station","icon","getIconURL","app","catch","body","ids","debug","status","send","startStations","stopStations","changeApp","params","id","getStationByID","lines","outputBuffer","getAll","error","globalHilbertCLIOutputBuffer","lastState","lastMKLivestatusDump","notifications","getLog","port","listen","info","appID","undefined"],"mappings":"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","file":"lib/http-api-server.js","sourcesContent":["import LongPollHandler from './long-poll-handler';\n\nconst EventEmitter = require('events').EventEmitter;\nconst iconmap = require('../../iconmap.json');\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\nexport default class HttpAPIServer {\n\n  constructor(stationManager, nconf, logger) {\n    this.stationManager = stationManager;\n    this.nconf = nconf;\n    this.logger = logger;\n\n    this.server = express();\n    this.server.use(bodyParser.json());\n\n    this.events = new EventEmitter();\n\n    this.setupRoutes();\n  }\n\n  setupRoutes() {\n    // getStations long poll handler\n    this.stationsLongPoll = new LongPollHandler(this.nconf.get('long_poll_timeout'));\n    this.stationManager.events.on('stationUpdate', () => {\n      this.stationsLongPoll.signalUpdate();\n    });\n    this.stationsLongPoll.events.on('wait', () => {\n      this.events.emit('longPollWait');\n    });\n    this.stationsLongPoll.events.on('timeout', () => {\n      this.events.emit('longPollTimeout');\n    });\n\n    const router = express.Router(); // eslint-disable-line new-cap\n    router.get('/stations', this.getStations.bind(this));\n    router.post('/stations/start', this.postStationsStart.bind(this));\n    router.post('/stations/stop', this.postStationsStop.bind(this));\n    router.post('/stations/change_app', this.postStationsChangeApp.bind(this));\n    router.get('/station/:id/output', this.getStationOutput.bind(this));\n    router.get('/server/output', this.getServerOutput.bind(this));\n    router.get('/server/mklivestatus', this.getServerMKLivestatus.bind(this));\n    router.get('/notifications', this.getNotifications.bind(this));\n\n    this.server.use(router);\n  }\n\n  getStations(req, res) {\n    this.stationsLongPoll.handleRequest(req, res)\n    .then((updateID) => {\n      const stations = this.stationManager.getStations();\n      for (const station of stations) {\n        station.icon = HttpAPIServer.getIconURL(station.app);\n      }\n      res.json({\n        updateID,\n        stations,\n      });\n    })\n    .catch(() => {\n      res.json({});\n    });\n  }\n\n  postStationsStart(req, res) {\n    if (!req.body.ids) {\n      this.logger.debug(\"HTTP request received: Start stations missing required 'ids' argument\");\n      res.status(400).send(\"Missing 'ids' argument\");\n      return;\n    }\n    this.logger.debug(`HTTP request received: Start stations ${req.body.ids}`);\n    this.stationManager.startStations(req.body.ids);\n    res.json({});\n  }\n\n  postStationsStop(req, res) {\n    if (!req.body.ids) {\n      this.logger.debug(\"HTTP request received: Stop stations missing required 'ids' argument\");\n      res.status(400).send(\"Missing 'ids' argument\");\n      return;\n    }\n    this.logger.debug(`HTTP request received: Stop stations ${req.body.ids}`);\n    this.stationManager.stopStations(req.body.ids);\n    res.json({});\n  }\n\n  postStationsChangeApp(req, res) {\n    if (!req.body.ids) {\n      this.logger.debug(\"HTTP request received: Change app missing required 'ids' argument\");\n      res.status(400).send(\"Missing 'ids' argument\");\n      return;\n    }\n    if (!req.body.app) {\n      this.logger.debug(\"HTTP request received: Change app missing required 'app' argument\");\n      res.status(400).send(\"Missing 'app' argument\");\n      return;\n    }\n    this.logger.debug(\n      `HTTP request received: Change app of stations ${req.body.ids} to ${req.body.app}`);\n    this.stationManager.changeApp(req.body.ids, req.body.app);\n    res.json({});\n  }\n\n  getStationOutput(req, res) {\n    this.logger.debug(`HTTP request received: Get output of station ${req.params.id}`);\n    const station = this.stationManager.getStationByID(req.params.id);\n    if (station) {\n      res.json({\n        lines: station.outputBuffer.getAll(),\n      });\n    } else {\n      this.logger.error(`Requested output of non existant station ${req.params.id}`);\n      res.status(404).send('Station not found');\n    }\n  }\n\n  getServerOutput(req, res) {\n    this.logger.debug('HTTP request received: Get global output');\n    res.json({\n      lines: this.stationManager.globalHilbertCLIOutputBuffer.getAll(),\n    });\n  }\n\n  getServerMKLivestatus(req, res) {\n    this.logger.debug('HTTP request received: Get last MKLivestatus state');\n    res.json({\n      lastState: this.stationManager.lastMKLivestatusDump,\n    });\n  }\n\n  getNotifications(req, res) {\n    this.logger.debug('HTTP request received: Get notifications');\n    res.json({\n      notifications: this.stationManager.getLog(),\n    });\n  }\n\n  getServer() {\n    return this.server;\n  }\n\n  /**\n   * Return the URL of the icon of the specified app\n   *\n   * @param {string} appID - ID of the app\n   * @returns {string} - URL of the icon\n   */\n  static getIconURL(appID) {\n    if (iconmap[appID] !== undefined) {\n      return `icons/${iconmap[appID]}`;\n    }\n    return 'icons/none.png';\n  }\n\n  /**\n   * Start listening for requests on a port\n   *\n   * @param port\n   */\n  listen(port) {\n    this.server.listen(port);\n    this.logger.info(`Server listening on port ${port}.`);\n  }\n}\n"],"sourceRoot":"/source/"}