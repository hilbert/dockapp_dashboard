// Compiled by Babel
// ** DO NOT EDIT THIS FILE DIRECTLY **
//
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _longPollHandler = require('./long-poll-handler');

var _longPollHandler2 = _interopRequireDefault(_longPollHandler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EventEmitter = require('events').EventEmitter;
var iconmap = require('../../iconmap.json');
var express = require('express');
var bodyParser = require('body-parser');

var HttpAPIServer = function () {
  function HttpAPIServer(stationManager, nconf, logger) {
    _classCallCheck(this, HttpAPIServer);

    this.stationManager = stationManager;
    this.nconf = nconf;
    this.logger = logger;

    this.server = express();
    this.server.use(bodyParser.json());

    this.events = new EventEmitter();

    this.setupRoutes();
  }

  _createClass(HttpAPIServer, [{
    key: 'setupRoutes',
    value: function setupRoutes() {
      var _this = this;

      // getStations long poll handler
      this.stationsLongPoll = new _longPollHandler2.default(this.nconf.get('long_poll_timeout'));
      this.stationManager.events.on('stationUpdate', function () {
        _this.stationsLongPoll.signalUpdate();
      });
      this.stationsLongPoll.events.on('wait', function () {
        _this.events.emit('longPollWait');
      });
      this.stationsLongPoll.events.on('timeout', function () {
        _this.events.emit('longPollTimeout');
      });

      var router = express.Router(); // eslint-disable-line new-cap
      router.get('/stations', this.getStations.bind(this));
      router.post('/stations/start', this.postStationsStart.bind(this));
      router.post('/stations/stop', this.postStationsStop.bind(this));
      router.post('/stations/change_app', this.postStationsChangeApp.bind(this));
      router.get('/station/:id/output', this.getStationOutput.bind(this));
      router.get('/server/output', this.getServerOutput.bind(this));
      router.get('/server/mklivestatus', this.getServerMKLivestatus.bind(this));
      router.get('/notifications', this.getNotifications.bind(this));

      this.server.use(router);
    }
  }, {
    key: 'getStations',
    value: function getStations(req, res) {
      var _this2 = this;

      this.stationsLongPoll.handleRequest(req, res).then(function (updateID) {
        var stations = _this2.stationManager.getStations();
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = stations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var station = _step.value;

            station.icon = HttpAPIServer.getIconURL(station.app);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        res.json({
          updateID: updateID,
          stations: stations
        });
      }).catch(function () {
        res.json({});
      });
    }
  }, {
    key: 'postStationsStart',
    value: function postStationsStart(req, res) {
      if (!req.body.ids) {
        this.logger.debug("HTTP request received: Start stations missing required 'ids' argument");
        res.status(400).send("Missing 'ids' argument");
        return;
      }
      this.logger.debug('HTTP request received: Start stations ' + req.body.ids);
      this.stationManager.startStations(req.body.ids);
      res.json({});
    }
  }, {
    key: 'postStationsStop',
    value: function postStationsStop(req, res) {
      if (!req.body.ids) {
        this.logger.debug("HTTP request received: Stop stations missing required 'ids' argument");
        res.status(400).send("Missing 'ids' argument");
        return;
      }
      this.logger.debug('HTTP request received: Stop stations ' + req.body.ids);
      this.stationManager.stopStations(req.body.ids);
      res.json({});
    }
  }, {
    key: 'postStationsChangeApp',
    value: function postStationsChangeApp(req, res) {
      if (!req.body.ids) {
        this.logger.debug("HTTP request received: Change app missing required 'ids' argument");
        res.status(400).send("Missing 'ids' argument");
        return;
      }
      if (!req.body.app) {
        this.logger.debug("HTTP request received: Change app missing required 'app' argument");
        res.status(400).send("Missing 'app' argument");
        return;
      }
      this.logger.debug('HTTP request received: Change app of stations ' + req.body.ids + ' to ' + req.body.app);
      this.stationManager.changeApp(req.body.ids, req.body.app);
      res.json({});
    }
  }, {
    key: 'getStationOutput',
    value: function getStationOutput(req, res) {
      this.logger.debug('HTTP request received: Get output of station ' + req.params.id);
      var station = this.stationManager.getStationByID(req.params.id);
      if (station) {
        res.json({
          lines: station.outputBuffer.getAll()
        });
      } else {
        this.logger.error('Requested output of non existant station ' + req.params.id);
        res.status(404).send('Station not found');
      }
    }
  }, {
    key: 'getServerOutput',
    value: function getServerOutput(req, res) {
      this.logger.debug('HTTP request received: Get global output');
      res.json({
        lines: this.stationManager.globalHilbertCLIOutputBuffer.getAll()
      });
    }
  }, {
    key: 'getServerMKLivestatus',
    value: function getServerMKLivestatus(req, res) {
      this.logger.debug('HTTP request received: Get last MKLivestatus state');
      res.json({
        lastState: this.stationManager.lastMKLivestatusDump
      });
    }
  }, {
    key: 'getNotifications',
    value: function getNotifications(req, res) {
      this.logger.debug('HTTP request received: Get notifications');
      res.json({
        notifications: this.stationManager.getLog()
      });
    }
  }, {
    key: 'getServer',
    value: function getServer() {
      return this.server;
    }

    /**
     * Return the URL of the icon of the specified app
     *
     * @param {string} appID - ID of the app
     * @returns {string} - URL of the icon
     */

  }, {
    key: 'listen',


    /**
     * Start listening for requests on a port
     *
     * @param port
     */
    value: function listen(port) {
      this.server.listen(port);
      this.logger.info('Server listening on port ' + port + '.');
    }
  }], [{
    key: 'getIconURL',
    value: function getIconURL(appID) {
      if (iconmap[appID] !== undefined) {
        return 'icons/' + iconmap[appID];
      }
      return 'icons/none.png';
    }
  }]);

  return HttpAPIServer;
}();

exports.default = HttpAPIServer;
//# sourceMappingURL=http-api-server.js.map
