// Compiled by Babel
// ** DO NOT EDIT THIS FILE DIRECTLY **
//
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Promise = require('bluebird');
var EventEmitter = require('events').EventEmitter;

/**
 * Manages Long Polling for a single HTTP API endpoint
 */

var LongPollHandler = function () {

  /**
   * Constructor
   * @param timeoutSecs Long poll timeout (in seconds)
   */
  function LongPollHandler() {
    var timeoutSecs = arguments.length <= 0 || arguments[0] === undefined ? 15 : arguments[0];

    _classCallCheck(this, LongPollHandler);

    this.timeoutSecs = timeoutSecs;
    this.updateID = 1;

    this.events = new EventEmitter();

    this.updateEventEmitter = new EventEmitter();
    this.updateEventEmitter.setMaxListeners(100);
  }

  /**
   * Handles an http request using long polling
   *
   * Call this method upon receiving an http request. It returns a
   * promise that signals when the client can send the response.
   *
   * If the client is synced it the promise will resolve immediately.
   * If the client is out of sync the promise will resolve as soon as
   * the handler is signaled that there are updates, or will reject if
   * there is a time out (in which case the client can send an empty
   * response)
   **
   * @param req HTTP Request (express)
   * @param res HTTP Response (express)
   * @return {Promise}
   */


  _createClass(LongPollHandler, [{
    key: 'handleRequest',
    value: function handleRequest(req, res) {
      var _this = this;

      return new Promise(function (resolve, reject) {
        // If the client is out of sync we can respond right away
        if (Number(req.query.lastUpdateID) !== _this.updateID) {
          resolve(_this.updateID);
        } else {
          (function () {
            // If the client is synced...

            var pollTimeout = null;
            // Respond when an update arrives (and clear the timeout)
            var updateHandler = function updateHandler() {
              clearTimeout(pollTimeout);
              resolve(_this.updateID);
            };
            _this.updateEventEmitter.once('update', updateHandler);

            // Time out if no updates arrive (and remove the update handler)
            pollTimeout = setTimeout(function () {
              _this.updateEventEmitter.removeListener('update', updateHandler);
              _this.events.emit('timeout');
              reject(Error('Time out waiting for updates'));
            }, _this.timeoutSecs * 1000);

            _this.events.emit('wait');
          })();
        }
      });
    }

    /**
     * Signal the handler that the data associated with this endpoint updated
     *
     * The handler emits an internal event to wake all waiting requests.
     */

  }, {
    key: 'signalUpdate',
    value: function signalUpdate() {
      this.updateID += 1;
      this.updateEventEmitter.emit('update');
    }
  }]);

  return LongPollHandler;
}();

exports.default = LongPollHandler;
//# sourceMappingURL=long-poll-handler.js.map
